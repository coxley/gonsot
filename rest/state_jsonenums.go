// generated by jsonenums -type=State; DO NOT EDIT

package rest

import (
	"encoding/json"
	"fmt"
)

var (
	_StateNameToValue = map[string]State{
		"Allocated": Allocated,
		"Assigned":  Assigned,
		"Orphaned":  Orphaned,
		"Reserved":  Reserved,
	}

	_StateValueToName = map[State]string{
		Allocated: "Allocated",
		Assigned:  "Assigned",
		Orphaned:  "Orphaned",
		Reserved:  "Reserved",
	}
)

func init() {
	var v State
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_StateNameToValue = map[string]State{
			interface{}(Allocated).(fmt.Stringer).String(): Allocated,
			interface{}(Assigned).(fmt.Stringer).String():  Assigned,
			interface{}(Orphaned).(fmt.Stringer).String():  Orphaned,
			interface{}(Reserved).(fmt.Stringer).String():  Reserved,
		}
	}
}

// MarshalJSON is generated so State satisfies json.Marshaler.
func (r State) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _StateValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid State: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so State satisfies json.Unmarshaler.
func (r *State) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("State should be a string, got %s", data)
	}
	v, ok := _StateNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid State %q", s)
	}
	*r = v
	return nil
}
